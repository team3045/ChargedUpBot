// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.RunCommand;

import java.io.IOException;
import java.nio.file.Path;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.controller.RamseteController;
import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.trajectory.Trajectory;
import edu.wpi.first.math.trajectory.TrajectoryUtil;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.DriveTrain;



  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {
  public static RobotContainer m_robotContainer = new RobotContainer();

  // Config pigeon
  // Last two parameters should be changed to reflect offsets in pitch and roll, respectively
  
  
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Compressor compressor;
    public final PhotoVision m_photoVision = new PhotoVision();
    //public final TelescopingArm m_telescopingArm = new TelescopingArm();
    public final FourBar m_fourBar = new FourBar();
    public final DriveTrain m_driveTrain = new DriveTrain();
    public final Claw m_claw = new Claw();
    public final Joystick LJoystick = new Joystick(0);
    public final Joystick RJoystick = new Joystick(1);
    public final Joystick buttonboard = new Joystick(2);

    public final Balance balance;

    public final IntakeCone intakeCone;
    public final IntakeCube intakeCube;
    public final Outtake outtake;
    public final ToggleGrab toggleGrab;

    public final FourBar_LowPos fourBar_LowPos;
    public final FourBar_MidPos fourBar_MidPos;
    public final FourBar_HighPos fourBar_HighPos;


// Joysticks
    private final XboxController controller = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems

    compressor = new Compressor(1, PneumaticsModuleType.REVPH);
    compressor.enableAnalog(100, 120);
    balance = new Balance(m_driveTrain);
    
    // SmartDashboard Buttons
    fourBar_LowPos = new FourBar_LowPos(m_fourBar);
    fourBar_MidPos = new FourBar_MidPos(m_fourBar);
    fourBar_HighPos = new FourBar_HighPos(m_fourBar);

    intakeCube = new IntakeCube(m_claw);
    intakeCone = new IntakeCone(m_claw);
    outtake = new Outtake(m_claw);
    toggleGrab = new ToggleGrab(m_claw);

    switch (m_driveTrain.getDriveMode()) {
      case TANK:
        m_driveTrain.setDefaultCommand(new RunCommand(() -> m_driveTrain.tankDrive(-LJoystick.getRawAxis(1), -RJoystick.getRawAxis(1)), m_driveTrain));
        break;
      //case CHEEZY:
        //m_driveTrain.setDefaultCommand(new RunCommand(() -> m_driveTrain.cheezyDrive(getLeftY(), getRightX()), m_driveTrain));
        //break;
      //case ARCADE:
        //m_driveTrain.setDefaultCommand(new RunCommand(() -> m_driveTrain.arcadeDrive(getLeftY(), getRightX()), m_driveTrain));
        //break;
      default:
        // tank 
        

        m_driveTrain.pigeon.configMountPose(0, 0, 0);
        m_driveTrain.pigeon.setYaw(0);
        break;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons

    new JoystickButton(buttonboard, 5).whileTrue(balance);

    new JoystickButton(buttonboard, 4).whileTrue(intakeCone);

    new JoystickButton(buttonboard, 3).whileTrue(outtake);

    new JoystickButton(buttonboard, Constants.lowPosID).onTrue(fourBar_LowPos);

    new JoystickButton(buttonboard, Constants.midPosID).onTrue(fourBar_MidPos);

    new JoystickButton(buttonboard, Constants.highPosID).onTrue(fourBar_HighPos);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getController() {
      return controller;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    int trajectoryID = (int) SmartDashboard.getNumber("Path", 0);
    Trajectory trajectory = null;
    try {
      Path trajectoryPath = Filesystem.getDeployDirectory().toPath().resolve(Constants.trajectoryJSONS[trajectoryID]);
      trajectory = TrajectoryUtil.fromPathweaverJson(trajectoryPath);
    } catch (IOException ex) {
      DriverStation.reportError("Unable to open trajectory: " + Constants.trajectoryJSONS[trajectoryID],
          ex.getStackTrace());
    }
    final AutonomousCommand autonomousCommand = new AutonomousCommand(
        trajectory,
        m_driveTrain::getPose,
        new RamseteController(Constants.kRamseteB, Constants.kRamseteZeta),
        new SimpleMotorFeedforward(
            Constants.ksVolts,
            Constants.kvVoltSecondsPerMeter,
            Constants.kaVoltSecondsSquaredPerMeter),
        Constants.kDriveKinematics,
        m_driveTrain::getWheelSpeeds,
        new PIDController(Constants.kPDriveVel, 0, 0),
        new PIDController(Constants.kPDriveVel, 0, 0),
        // RamseteCommand passes volts to the callback
        m_driveTrain::tankDriveVolts,
        m_driveTrain,
        getCommandsFromStrings(Constants.routineCommands[trajectoryID]),
        Constants.routineTimes[trajectoryID]);

    // Reset odometry to the starting pose of the trajectory.
    m_driveTrain.resetOdometry(trajectory.getInitialPose());

    // Run path following command, then stop at the end.
    return autonomousCommand.andThen(() -> m_driveTrain.tankDriveVolts(0, 0));
  }

  private Command[] getCommandsFromStrings(String... strings) {
    Command[] commands = new Command[strings.length];

    for (int i = 0; i < strings.length; i++) {
      try {
        commands[i] = getCommandFromString(strings[i]);
      } catch (Exception e) {
        System.err.println(e.getMessage());
        commands[i] = null;
      }
    }

    return commands;
  }

  private Command getCommandFromString(String string) throws Exception {
    switch (string) {
      case "balance":
        return balance;

      case "fblow":
        return fourBar_LowPos;
      case "fbmid":
        return fourBar_MidPos;
      case "fbhigh":
        return fourBar_HighPos;
      
      case "intakecone":
        return intakeCone;
      case "intakecube":
        return intakeCube;
      case "outtake":
        return outtake;
    }
    throw new Exception("string does not correspond to a command");
  }

}
